package org.generation.blogPessoal.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestMethodOrder;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import org.generation.blogPessoal.model.Usuario;
import org.generation.blogPessoal.repository.UsuarioRepository;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class) // @TestMethodOrder faz com que o programa rode os testes na ordem estabelecida
public class UsuarioControllerTest {

	@Autowired
	private TestRestTemplate testRestTemplate; //TestRestTemplate cria uma requisi√ß√£o, e envia essa requisi√ß√£o para a classe controladora

	private Usuario usuario; // objeto que permite trabalhar o m√©todo POST
	private Usuario usuarioUpdate; // objeto que permite trabalhar o m√©todo PUT
	private Usuario usuarioAdmin; // objeto que permite trabalhar os m√©todos PUT e GET, pois substitui a necessidade de usu√°rio e senha

	@Autowired
	private UsuarioRepository usuarioRepository; // UsuarioRepository permite o acesso ao banco de dados

	@BeforeAll
	public void start() {
		
		// cria-se os dados de acesso do administrador do sistema
		LocalDate dataAdmin = LocalDate.parse("1990-07-22", DateTimeFormatter.ofPattern("yyyy-MM-dd"));
		usuarioAdmin = new Usuario(0L, "Administrador", "admin@email.com.br", "admin123", dataAdmin);

		if (!usuarioRepository.findByUsuario(usuarioAdmin.getUsuario()).isPresent()) { // verificar se os dados do administrador j√° existem no sistema

			HttpEntity<Usuario> request = new HttpEntity<Usuario>(usuarioAdmin);
			testRestTemplate.exchange("/usuarios/cadastrar", HttpMethod.POST, request, Usuario.class); // cria o usu√°rio, para se testar os m√©todos que precisam de autentica√ß√£o para funcionar
		}

		LocalDate dataPost = LocalDate.parse("2000-07-22", DateTimeFormatter.ofPattern("yyyy-MM-dd"));
		usuario = new Usuario(0L, "Paulo Antunes", "paulo@email.com.br", "13465278", dataPost); // met√≥do usu√°rio

		LocalDate dataPut = LocalDate.parse("2000-07-22", DateTimeFormatter.ofPattern("yyyy-MM-dd"));
		usuarioUpdate = new Usuario(2L, "Paulo Antunes de Souza", "paulo_souza@email.com.br", "souza123", dataPut); 

	}
	
	@Test
	@Order(1) 	//identifica a ordem a ser seguida de testes.
    @DisplayName("‚úî Cadastrar Usu√°rio!")
	public void deveRealizarPostUsuario() {

		HttpEntity<Usuario> request = new HttpEntity<Usuario>(usuario);

		ResponseEntity<Usuario> resposta = testRestTemplate.exchange("/usuario/cadastrar", HttpMethod.POST, request, Usuario.class);
		
		// verificar se a resposta foi gravada, ou seja, cria-se um usu√°rio, se sim, o teste foi ok
		assertEquals(HttpStatus.CREATED, resposta.getStatusCode()); 
	}

	@Test
	@Order(2)
	@DisplayName("üëç Listar todos os Usu√°rios!")
	public void deveMostrarTodosUsuarios() {
		 
		// por apenas listar os usu√°rios, n√£o cria a requisi√ß√£o
		// deve-se colocar o withBasicAuth (login e senha) + endpoint "/usuarios/all" +
		// m√©todo GET + Null (pois n√£o h√° requisi√ß√£o) + String.class (porque mostra a lista de usu√°rios do banco, n√£o um usu√°rio em espec√≠fico
		// se a resposta for ok, ou seja, trazer a lista, o teste foi ok
		ResponseEntity<String> resposta = testRestTemplate.withBasicAuth("admin@email.com.br", "admin123")
		.exchange("/usuario/all", HttpMethod.GET, null, String.class);

		assertEquals(HttpStatus.OK, resposta.getStatusCode()); // 
	}

	@Test
	@Order(3)
	@DisplayName("üò≥ Alterar Usu√°rio!")
	public void deveRealizarPutUsuario() {
		
		HttpEntity<Usuario> request = new HttpEntity<Usuario>(usuarioUpdate);
		
		// withBasicAuth determina o login e a senha para que se fa√ßa a requisi√ß√£o
		ResponseEntity<Usuario> resposta = testRestTemplate.withBasicAuth("admin@email.com.br", "admin123")
		.exchange("/usuario/alterar", HttpMethod.PUT, request, Usuario.class);
		
		assertEquals(HttpStatus.OK, resposta.getStatusCode()); // se a altera√ß√£o for feita, o teste foi ok
	}
}

// O teste da Camada Controller √© um pouco diferente dos testes anteriores
// porqu√™ faremos
// Requisi√ß√µes (http Request) e na sequencia o teste analisar√° se as Respostas
// das
// Requisi√ß√µes (http Response) foram as esperadas.
// Observe que o m√©todo start(), anotado com a anota√ß√£o @BeforeAll, inicializa
// tr√™s objetos do
// tipo Usu√°rio:
// 1. usuario: N√£o foi passado o Id, porqu√™ este objeto ser√° utilizado para
// testar o m√©todo Post.
// 2. usuarioUpdate: Foi passado o Id, porqu√™ o objeto ser√° utilizado para
// testar o m√©todo Put.
// 3. usuarioAdmin: Como o nosso Blog Pessoal est√° com a Camada de Seguran√ßa
// Basic
// implementada, precisaremos de um usu√°rio para efetuar login na API.
// Utilizaremos este
// objeto para criar o usu√°rio administrador antes de executar os testes.
// Para simular as Requisi√ß√µes e Respostas, utilizaremos algumas classes e
// m√©todos:

// TestRestTemplate()
// √â um cliente para escrever testes criando um modelo de comunica√ß√£o com as
// APIs HTTP. Ele fornece os mesmos
// m√©todos, cabe√ßalhos e outras constru√ß√µes do protocolo HTTP.

// HttpEntity() Representa uma solicita√ß√£o HTTP ou uma entidade de resposta,
// composta pelo status da resposta (2XX, 4XX ou
// 5XX), o corpo (Body) e os cabe√ßalhos (Headers).

// ResponseEntity() Extens√£o de HttpEntity que adiciona um c√≥digo de status
// (http Status)
// TestRestTemplate.exchange(URI, HttpMethod, RequestType, ResponseType) : O
// m√©todo exchange executa uma requisi√ß√£o de qualquer
// m√©todo HTTP e retorna uma inst√¢ncia da Classe ResponseEntity. Ele pode ser
// usado para criar requisi√ß√µes
// com os verbos http GET, POST, PUT e DELETE. Usando o m√©todo exchange(),
// podemos realizar todas as opera√ß√µes
// do CRUD (criar, consultar, atualizar e excluir). Todas as requisi√ß√µes do
// m√©todo exchange() retornar√£o como
// resposta um Objeto da Classe ResponseEntity.
